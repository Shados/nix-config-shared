From 3c6458eb5fe111c58ade73fa0abedf39e53eeadc Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Tue, 14 Aug 2018 17:44:15 +0200
Subject: [PATCH 2/2] uksm-4.18: rework exit_mmap() locking

This *may* prevent bad things from happening during OOM handling.

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 mm/mmap.c | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/mm/mmap.c b/mm/mmap.c
index 1d75ae60a0a9..80c7ee4e0088 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -3069,12 +3069,6 @@ void exit_mmap(struct mm_struct *mm)
 	/* mm's last user has gone, and its about to be pulled down */
 	mmu_notifier_release(mm);
 
-	/*
-	 * Taking write lock on mmap_sem does not harm others,
-	 * but it's crucial for uksm to avoid races.
-	 */
-	down_write(&mm->mmap_sem);
-
 	if (unlikely(mm_is_oom_victim(mm))) {
 		/*
 		 * Manually reap the mm to free as much memory as possible.
@@ -3101,6 +3095,12 @@ void exit_mmap(struct mm_struct *mm)
 		up_write(&mm->mmap_sem);
 	}
 
+	/*
+	 * Taking write lock on mmap_sem does not harm others,
+	 * but it's crucial for uksm to avoid races.
+	 */
+	down_write(&mm->mmap_sem);
+
 	if (mm->locked_vm) {
 		vma = mm->mmap;
 		while (vma) {
@@ -3113,8 +3113,12 @@ void exit_mmap(struct mm_struct *mm)
 	arch_exit_mmap(mm);
 
 	vma = mm->mmap;
-	if (!vma)	/* Can happen if dup_mmap() received an OOM */
+	/* Can happen if dup_mmap() received an OOM */
+	if (!vma) {
+		/* Release write lock previously taken for UKSM */
+		up_write(&mm->mmap_sem);
 		return;
+	}
 
 	lru_add_drain();
 	flush_cache_mm(mm);
-- 
2.18.0.547.g1d89318c4

