From ccc32d83df4ae83590c941d57e197919132562b1 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Mon, 17 Sep 2018 15:56:09 +0000
Subject: [PATCH 11/15] pds: Re-mapping SCHED_DEADLINE to SCHED_FIFO

---
 include/uapi/linux/sched.h       |  5 ++++-
 kernel/sched/cpufreq_schedutil.c |  8 --------
 kernel/sched/pds.c               | 11 ++++++++++-
 kernel/sched/pds_sched.h         | 14 ++++++++++++++
 4 files changed, 28 insertions(+), 10 deletions(-)

diff --git a/include/uapi/linux/sched.h b/include/uapi/linux/sched.h
index ebc69c660546..e1dc3f960693 100644
--- a/include/uapi/linux/sched.h
+++ b/include/uapi/linux/sched.h
@@ -42,7 +42,10 @@
 #define SCHED_ISO		4
 #endif /* CONFIG_SCHED_PDS */
 #define SCHED_IDLE		5
-#ifndef CONFIG_SCHED_PDS
+#ifdef CONFIG_SCHED_PDS
+/* Re-mapping SCHED_DEADLINE to SCHED_FIFO in PDS */
+#define SCHED_DEADLINE		SCHED_FIFO
+#else
 #define SCHED_DEADLINE		6
 #endif /* !CONFIG_SCHED_PDS */
 
diff --git a/kernel/sched/cpufreq_schedutil.c b/kernel/sched/cpufreq_schedutil.c
index e53121035612..24a39dfffe6c 100644
--- a/kernel/sched/cpufreq_schedutil.c
+++ b/kernel/sched/cpufreq_schedutil.c
@@ -583,12 +583,8 @@ static int sugov_kthread_create(struct sugov_policy *sg_policy)
 	struct task_struct *thread;
 	struct sched_attr attr = {
 		.size		= sizeof(struct sched_attr),
-#ifdef CONFIG_SCHED_PDS
-		.sched_policy	= SCHED_FIFO,
-#else
 		.sched_policy	= SCHED_DEADLINE,
 		.sched_flags	= SCHED_FLAG_SUGOV,
-#endif
 		.sched_nice	= 0,
 		.sched_priority	= 0,
 		/*
@@ -616,11 +612,7 @@ static int sugov_kthread_create(struct sugov_policy *sg_policy)
 		return PTR_ERR(thread);
 	}
 
-#ifdef CONFIG_SCHED_PDS
-	ret = sched_setattr(thread, &attr);
-#else
 	ret = sched_setattr_nocheck(thread, &attr);
-#endif
 
 	if (ret) {
 		kthread_stop(thread);
diff --git a/kernel/sched/pds.c b/kernel/sched/pds.c
index 4bad95c112e2..7bf296f4f111 100644
--- a/kernel/sched/pds.c
+++ b/kernel/sched/pds.c
@@ -4432,7 +4432,7 @@ __sched_setscheduler(struct task_struct *p,
 			return -EINVAL;
 	}
 
-	if (attr->sched_flags & ~(SCHED_FLAG_RESET_ON_FORK))
+	if (attr->sched_flags & ~(SCHED_FLAG_ALL | SCHED_FLAG_SUGOV))
 		return -EINVAL;
 
 	/*
@@ -4500,6 +4500,9 @@ __sched_setscheduler(struct task_struct *p,
 	}
 
 	if (user) {
+		if (attr->sched_flags & SCHED_FLAG_SUGOV)
+			return retval;
+
 		retval = security_task_setscheduler(p);
 		if (retval)
 			return retval;
@@ -4647,6 +4650,12 @@ int sched_setattr(struct task_struct *p, const struct sched_attr *attr)
 }
 EXPORT_SYMBOL_GPL(sched_setattr);
 
+
+int sched_setattr_nocheck(struct task_struct *p, const struct sched_attr *attr)
+{
+	return __sched_setscheduler(p, attr, false, true);
+}
+
 /**
  * sched_setscheduler_nocheck - change the scheduling policy and/or RT priority of a thread from kernelspace.
  * @p: the task in question.
diff --git a/kernel/sched/pds_sched.h b/kernel/sched/pds_sched.h
index 6d20158b123a..73181453785e 100644
--- a/kernel/sched/pds_sched.h
+++ b/kernel/sched/pds_sched.h
@@ -349,4 +349,18 @@ unsigned long arch_scale_cpu_capacity(struct sched_domain *sd, int cpu)
 
 extern void schedule_idle(void);
 
+/*
+ * !! For sched_setattr_nocheck() (kernel) only !!
+ *
+ * This is actually gross. :(
+ *
+ * It is used to make schedutil kworker(s) higher priority than SCHED_DEADLINE
+ * tasks, but still be able to sleep. We need this on platforms that cannot
+ * atomically change clock frequency. Remove once fast switching will be
+ * available on such platforms.
+ *
+ * SUGOV stands for SchedUtil GOVernor.
+ */
+#define SCHED_FLAG_SUGOV	0x10000000
+
 #endif /* PDS_SCHED_H */
-- 
2.19.0

