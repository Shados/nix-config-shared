From 3a5644e64a3369a1e9d45b8638d28ede53bf9016 Mon Sep 17 00:00:00 2001
From: Josef Bacik <josef@toxicpanda.com>
Date: Mon, 11 Mar 2019 11:29:13 +0200
Subject: [PATCH 1/2] block: Init flush rq ref count to 1

We discovered a problem in newer kernels where a disconnect of a NBD
device while the flush request was pending would result in a hang.
This is because the blk mq timeout handler does

        if (!refcount_inc_not_zero(&rq->ref))
                return true;

to determine if it's ok to run the timeout handler for the request.
Flush_rq's don't have a ref count set, so we'd skip running
the timeout handler for this request and it would just sit there in
limbo forever.

Fix this by always setting the refcount of any request going through
blk_init_rq() to 1.  I tested this with a nbd-server that
dropped flush requests to verify that it hung, and then tested
with this patch to verify I got the timeout as expected and the error
handling kicked in.
Thanks,

Signed-off-by: Josef Bacik <josef@toxicpanda.com>
---
 block/blk-core.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/block/blk-core.c b/block/blk-core.c
index 828ef748ae09..18e78e6bbbd4 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -116,6 +116,7 @@ void blk_rq_init(struct request_queue *q, struct request *rq)
 	rq->internal_tag = -1;
 	rq->start_time_ns = ktime_get_ns();
 	rq->part = NULL;
+	refcount_set(&rq->ref, 1);
 }
 EXPORT_SYMBOL(blk_rq_init);
 
-- 
2.21.0.777.g83232e3864

